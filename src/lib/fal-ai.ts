import { fal } from '@fal-ai/client';

export class FalAIService {
  private modelId: string;

  constructor(model: 'schnell' | 'dev' | 'pro' = 'schnell') {
    // Choose model based on parameter
    if (model === 'schnell') {
      this.modelId = 'fal-ai/flux/schnell'; // Cheapest & fastest
    } else if (model === 'dev') {
      this.modelId = 'fal-ai/flux/dev'; // Mid-tier cost, higher quality
    } else {
      this.modelId = 'fal-ai/flux-pro/v1.1-ultra'; // Highest quality
    }

    // Configure Fal AI with API key
    fal.config({
      credentials: process.env.FAL_KEY, // Your API key in env
    });
  }

  async generateImage(prompt: string): Promise<string> {
    try {
      console.log(`Generating image with Fal AI model: ${this.modelId}`);
      
      const result = await fal.run(this.modelId, {
        input: {
          prompt: `Create a beautiful, colorful children's book illustration: ${prompt}. Style: whimsical, magical, child-friendly, vibrant colors, detailed but simple enough for children.`,
          size: "1024x1024" // Flux supports multiple sizes
        },
      });

      console.log('Fal AI result:', result);

      // Fal AI returns images in result.data.images
      if (!result?.data?.images?.length) {
        throw new Error('No image generated by Fal AI');
      }

      const imageUrl = result.data.images[0].url;
      console.log('Generated image URL:', imageUrl);
      return imageUrl;

    } catch (error) {
      console.error('Error generating image with Fal AI:', error);

      // Fallback to Unsplash
      const encodedPrompt = encodeURIComponent(prompt);
      const fallbackUrl = `https://source.unsplash.com/1024x1024/?${encodedPrompt}`;
      console.log('Using fallback URL:', fallbackUrl);
      return fallbackUrl;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      console.log(`Testing Fal AI connection using model: ${this.modelId}`);
      const result = await fal.run(this.modelId, {
        input: { prompt: "A simple test image of a red circle" },
      });

      console.log('Fal AI test successful:', result);
      return true;
    } catch (error) {
      console.error('Fal AI test failed:', error);
      return false;
    }
  }
}

// Example usage:
// Cheapest & fastest
export const falAIService = new FalAIService('schnell');

// Higher quality option:
// export const falAIService = new FalAIService('dev');

// Ultra quality option:
// export const falAIService = new FalAIService('pro');
